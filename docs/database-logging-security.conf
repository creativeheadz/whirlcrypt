# PostgreSQL Security Logging Configuration
# Comprehensive logging setup for security monitoring and forensics
# Add these settings to postgresql.conf

# =============================================================================
# LOGGING INFRASTRUCTURE
# =============================================================================

# Enable logging collector (required for file-based logging)
logging_collector = on

# Log destination (stderr for systemd, csvlog for analysis)
log_destination = 'stderr,csvlog'

# Log directory and file naming
log_directory = '/var/log/postgresql'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_file_mode = 0600                   # Secure file permissions

# Log rotation settings
log_rotation_age = 1d                  # Rotate daily
log_rotation_size = 100MB              # Rotate at 100MB
log_truncate_on_rotation = on          # Overwrite old files

# =============================================================================
# CONNECTION AND AUTHENTICATION LOGGING
# =============================================================================

# Log all connection attempts (successful and failed)
log_connections = on
log_disconnections = on

# Include hostname in logs (security monitoring)
log_hostname = on

# Log authentication failures
log_statement = 'all'                  # Log all statements for security
# Alternative: log_statement = 'mod'   # Log only DDL/DML for performance

# =============================================================================
# STATEMENT AND QUERY LOGGING
# =============================================================================

# Log slow queries (potential DoS attacks)
log_min_duration_statement = 5000     # Log queries > 5 seconds

# Log all DDL statements (schema changes)
log_statement = 'ddl'                 # Alternative to 'all' for less verbose logging

# Detailed log line prefix for forensics
log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h,session=%c,txn=%x,statement=%s '

# Log query parameters (be careful with sensitive data)
log_parameter_max_length = 0          # Don't log parameters (security)
# log_parameter_max_length = 1000     # Log first 1000 chars of parameters

# =============================================================================
# SECURITY EVENT LOGGING
# =============================================================================

# Log checkpoints (system health monitoring)
log_checkpoints = on

# Log lock waits (potential deadlock attacks)
log_lock_waits = on

# Log temporary file creation (resource monitoring)
log_temp_files = 0                    # Log all temp files

# Log autovacuum activity (maintenance monitoring)
log_autovacuum_min_duration = 0       # Log all autovacuum activity

# =============================================================================
# ERROR AND WARNING LOGGING
# =============================================================================

# Log level for server messages
log_min_messages = warning            # Log warnings and above

# Log level for error messages sent to client
client_min_messages = notice          # Send notices and above to client

# Log SQL errors
log_error_verbosity = default         # Include DETAIL and HINT

# =============================================================================
# PERFORMANCE AND RESOURCE LOGGING
# =============================================================================

# Log resource usage statistics
log_executor_stats = off              # Disable for production (performance)
log_parser_stats = off                # Disable for production
log_planner_stats = off               # Disable for production
log_statement_stats = off             # Disable for production

# Alternative: Enable only if needed for troubleshooting
# log_duration = on                   # Log statement duration

# =============================================================================
# CSV LOGGING FORMAT (for log analysis tools)
# =============================================================================

# CSV logging provides structured data for analysis
# Fields included in CSV logs:
# log_time, user_name, database_name, process_id, connection_from, session_id,
# session_line_num, command_tag, session_start_time, virtual_transaction_id,
# transaction_id, error_severity, sql_state_code, message, detail, hint,
# internal_query, internal_query_pos, context, query, query_pos, location,
# application_name

# =============================================================================
# LOG ANALYSIS AND MONITORING QUERIES
# =============================================================================

# Use these SQL queries to analyze logs (if using csvlog):

# -- Failed authentication attempts
# COPY (
#   SELECT log_time, user_name, database_name, connection_from, message
#   FROM postgres_log 
#   WHERE message LIKE '%authentication failed%'
#   ORDER BY log_time DESC
# ) TO '/tmp/failed_auth.csv' CSV HEADER;

# -- Long running queries
# COPY (
#   SELECT log_time, user_name, database_name, query, 
#          EXTRACT(EPOCH FROM (session_start_time - log_time)) as duration_seconds
#   FROM postgres_log 
#   WHERE message LIKE '%duration:%'
#   ORDER BY duration_seconds DESC
# ) TO '/tmp/slow_queries.csv' CSV HEADER;

# -- Connection patterns
# COPY (
#   SELECT DATE(log_time) as date, 
#          COUNT(*) as connections,
#          COUNT(DISTINCT connection_from) as unique_ips
#   FROM postgres_log 
#   WHERE message LIKE '%connection authorized%'
#   GROUP BY DATE(log_time)
#   ORDER BY date DESC
# ) TO '/tmp/connection_stats.csv' CSV HEADER;

# =============================================================================
# SECURITY MONITORING RECOMMENDATIONS
# =============================================================================

# 1. LOG ROTATION AND RETENTION
#    - Keep logs for at least 90 days for security analysis
#    - Compress old logs to save space
#    - Consider shipping logs to centralized logging system

# 2. LOG MONITORING TOOLS
#    - Use logrotate for automatic log rotation
#    - Consider tools like fail2ban for automated response
#    - Set up alerts for suspicious patterns

# 3. REGULAR LOG ANALYSIS
#    - Monitor failed authentication attempts
#    - Track unusual query patterns
#    - Watch for privilege escalation attempts
#    - Monitor connection sources and patterns

# 4. LOG SECURITY
#    - Secure log files with appropriate permissions (600)
#    - Consider log encryption for sensitive environments
#    - Implement log integrity checking
#    - Backup logs to secure location

# =============================================================================
# LOGROTATE CONFIGURATION EXAMPLE
# =============================================================================

# Create /etc/logrotate.d/postgresql with this content:
# /var/log/postgresql/*.log {
#     daily
#     missingok
#     rotate 90
#     compress
#     delaycompress
#     notifempty
#     create 0600 postgres postgres
#     postrotate
#         /usr/bin/killall -HUP postgres 2>/dev/null || true
#     endscript
# }

# =============================================================================
# FAIL2BAN CONFIGURATION EXAMPLE
# =============================================================================

# Create /etc/fail2ban/jail.d/postgresql.conf:
# [postgresql]
# enabled = true
# port = 5432
# filter = postgresql
# logpath = /var/log/postgresql/postgresql-*.log
# maxretry = 3
# bantime = 3600
# findtime = 600

# Create /etc/fail2ban/filter.d/postgresql.conf:
# [Definition]
# failregex = FATAL:  password authentication failed for user ".*" from <HOST>
#             FATAL:  no pg_hba.conf entry for host "<HOST>"
# ignoreregex =

# =============================================================================
# IMPLEMENTATION CHECKLIST
# =============================================================================

# [ ] 1. Backup current postgresql.conf
# [ ] 2. Add logging configuration to postgresql.conf
# [ ] 3. Create log directory with proper permissions
# [ ] 4. Restart PostgreSQL service
# [ ] 5. Test logging by connecting and running queries
# [ ] 6. Set up log rotation with logrotate
# [ ] 7. Configure monitoring and alerting
# [ ] 8. Document log analysis procedures
# [ ] 9. Train team on log monitoring
# [ ] 10. Schedule regular log reviews
